pipeline {
    agent {
        docker {
            image 'demopq/robot-python-sele-chor:phuongttq'
            args '-u root'
        }
    }
    
    // Th√™m parameters ƒë·ªÉ nh·∫≠n t·ª´ TestOps
    parameters {
        string(name: 'TASK_ID', defaultValue: '', description: 'Task ID from TestOps')
        string(name: 'ID_PJ', defaultValue: '', description: 'Project ID from TestOps') 
        string(name: 'CRON_EXPRESSION', defaultValue: '', description: 'Cron expression for scheduling')
    }
    
    triggers {
        cron('0 8 * * *')  // Ch·∫°y h√†ng ng√†y l√∫c 8h s√°ng (c√≥ th·ªÉ thay ƒë·ªïi)
    }
    
    stages {
        stage('Setup') {
            steps {
                echo "=== TH√îNG TIN TASK T·ª™ TESTOPS ==="
                echo "Task ID: ${params.TASK_ID}"
                echo "Project ID: ${params.ID_PJ}"
                echo "Cron Expression: ${params.CRON_EXPRESSION}"
                echo "=================================="
                
                script {
                    // Ki·ªÉm tra parameters c√≥ ƒë∆∞·ª£c truy·ªÅn kh√¥ng
                    if (params.TASK_ID && params.TASK_ID.trim() != '') {
                        echo "‚úÖ Task ID ƒë∆∞·ª£c truy·ªÅn t·ª´ TestOps: ${params.TASK_ID}"
                    } else {
                        echo "‚ö†Ô∏è Task ID kh√¥ng ƒë∆∞·ª£c truy·ªÅn, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh"
                    }
                    
                    if (params.ID_PJ && params.ID_PJ.trim() != '') {
                        echo "‚úÖ Project ID ƒë∆∞·ª£c truy·ªÅn t·ª´ TestOps: ${params.ID_PJ}"
                    } else {
                        echo "‚ö†Ô∏è Project ID kh√¥ng ƒë∆∞·ª£c truy·ªÅn, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh"
                    }
                    
                    if (params.CRON_EXPRESSION && params.CRON_EXPRESSION.trim() != '') {
                        echo "‚úÖ Cron Expression ƒë∆∞·ª£c truy·ªÅn t·ª´ TestOps: ${params.CRON_EXPRESSION}"
                        // C√≥ th·ªÉ s·ª≠ d·ª•ng cron expression ƒë·ªÉ logic kh√°c
                        def cronParts = params.CRON_EXPRESSION.split(' ')
                        if (cronParts.length == 5) {
                            echo "üìÖ Cron format h·ª£p l·ªá: ${cronParts}"
                        }
                    } else {
                        echo "‚ö†Ô∏è Cron Expression kh√¥ng ƒë∆∞·ª£c truy·ªÅn, s·ª≠ d·ª•ng trigger m·∫∑c ƒë·ªãnh"
                    }
                }
            }
        }
        
        stage('Run Robot Tests') {
            steps {
                sh '''
                    echo "B·∫Øt ƒë·∫ßu ch·∫°y Robot Framework tests..."
                    mkdir -p results
                    robot --outputdir results Bases/Testcase/login.robot
                    echo "Ho√†n th√†nh ch·∫°y tests!"
                '''
            }
        }
        
        stage('Process Results') {
            steps {
                script {
                    // X·ª≠ l√Ω k·∫øt qu·∫£ test
                    echo "üìä X·ª≠ l√Ω k·∫øt qu·∫£ test cho Task: ${params.TASK_ID}"
                    echo "üìÅ Project: ${params.ID_PJ}"
                    
                    // C√≥ th·ªÉ th√™m logic x·ª≠ l√Ω k·∫øt qu·∫£ ·ªü ƒë√¢y
                    // V√≠ d·ª•: upload report v·ªÅ TestOps, g·ª≠i notification, etc.
                }
            }
        }
    }

    post {
        always {
            robot outputPath: 'results'
            
            script {
                echo "üèÅ K·∫øt th√∫c job v·ªõi Task ID: ${params.TASK_ID}"
                echo "üìà Robot report ƒë√£ ƒë∆∞·ª£c t·∫°o trong th∆∞ m·ª•c results/"
            }
        }
        
        success {
            echo "‚úÖ Job ch·∫°y th√†nh c√¥ng!"
        }
        
        failure {
            echo "‚ùå Job ch·∫°y th·∫•t b·∫°i!"
        }
    }
} 
